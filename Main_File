import tkinter as tk
from tkinter import ttk
from datetime import datetime, timedelta
import sqlite3

class ToDoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List App")

        self.tasks = []
        self.done_tasks = []
        self.streak_count = 0
        self.last_streak_update = None
        self.reset_time = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)

        self.create_ui()
        self.setup_database()
        self.load_tasks()

    def setup_database(self):
        self.conn = sqlite3.connect('tasks.db')
        self.cursor = self.conn.cursor()
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS tasks (
                id INTEGER PRIMARY KEY,
                name TEXT,
                priority TEXT,
                time_needed INTEGER,
                start_time TEXT,
                is_done INTEGER
            )
        ''')
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS streak (
                id INTEGER PRIMARY KEY,
                last_update TEXT,
                streak_count INTEGER
            )
        ''')
        self.conn.commit()
        self.load_streak()

    def load_streak(self):
        self.cursor.execute('SELECT last_update, streak_count FROM streak WHERE id = 1')
        result = self.cursor.fetchone()
        if result:
            self.last_streak_update = datetime.strptime(result[0], '%Y-%m-%d')
            self.streak_count = result[1]
        else:
            self.cursor.execute('INSERT INTO streak (id, last_update, streak_count) VALUES (1, ?, ?)', (datetime.now().strftime('%Y-%m-%d'), 0))
            self.conn.commit()
            self.last_streak_update = datetime.now()
            self.streak_count = 0

    def save_streak(self):
        self.cursor.execute('UPDATE streak SET last_update = ?, streak_count = ? WHERE id = 1', (self.last_streak_update.strftime('%Y-%m-%d'), self.streak_count))
        self.conn.commit()

    def load_tasks(self):
        self.cursor.execute('SELECT * FROM tasks WHERE is_done = 0')
        self.tasks = self.cursor.fetchall()
        for task in self.tasks:
            self.task_listbox.insert(tk.END, f"{task[1]} - {task[2]} - {task[3]} min")

        self.cursor.execute('SELECT * FROM tasks WHERE is_done = 1')
        self.done_tasks = self.cursor.fetchall()
        for task in self.done_tasks:
            self.done_listbox.insert(tk.END, f"{task[1]} - {task[2]} - {task[3]} min")

    def save_task_to_db(self, task):
        self.cursor.execute('''
            INSERT INTO tasks (name, priority, time_needed, start_time, is_done)
            VALUES (?, ?, ?, ?, ?)
        ''', (task['name'], task['priority'], task['time_needed'], task['start_time'], task['is_done']))
        self.conn.commit()
        task_id = self.cursor.lastrowid
        return task_id

    def update_task_in_db(self, task_id, is_done):
        self.cursor.execute('UPDATE tasks SET is_done = ? WHERE id = ?', (is_done, task_id))
        self.conn.commit()

    def create_ui(self):
        self.add_task_button = ttk.Button(self.root, text="Add Task", command=self.open_task_creation_window)
        self.add_task_button.grid(row=0, column=0, columnspan=2)

        self.uncompleted_label = ttk.Label(self.root, text="Uncompleted Tasks")
        self.uncompleted_label.grid(row=1, column=0)

        self.completed_label = ttk.Label(self.root, text="Completed Tasks")
        self.completed_label.grid(row=1, column=1)

        self.task_listbox = tk.Listbox(self.root)
        self.task_listbox.grid(row=2, column=0)

        self.done_listbox = tk.Listbox(self.root)
        self.done_listbox.grid(row=2, column=1)

        self.start_timer_button = ttk.Button(self.root, text="Start Timer", command=self.open_timer_window)
        self.start_timer_button.grid(row=3, column=0)

        self.remove_task_button = ttk.Button(self.root, text="Remove Task", command=self.remove_task)
        self.remove_task_button.grid(row=3, column=1)

        self.streak_label = ttk.Label(self.root, text=f"Streak: {self.streak_count}")
        self.streak_label.grid(row=4, column=0, columnspan=2)

        self.root.after(1000, self.check_reset_time)

    def open_task_creation_window(self):
        self.task_creation_window = tk.Toplevel(self.root)
        self.task_creation_window.title("Create Task")

        # Configure the grid layout
        self.task_creation_window.columnconfigure(0, weight=1)
        self.task_creation_window.columnconfigure(1, weight=1)
        self.task_creation_window.columnconfigure(2, weight=1)
        self.task_creation_window.columnconfigure(3, weight=1)

        # Task Name
        self.task_name_label = ttk.Label(self.task_creation_window, text="Task Name:")
        self.task_name_label.grid(row=0, column=0, padx=10, pady=10, sticky="E")

        self.task_name_entry = ttk.Entry(self.task_creation_window)
        self.task_name_entry.grid(row=0, column=1, columnspan=3, padx=10, pady=10, sticky="W")

        # Priority Level
        self.priority_label = ttk.Label(self.task_creation_window, text="Priority Level:")
        self.priority_label.grid(row=1, column=0, padx=10, pady=10, sticky="E")

        self.priority_combobox = ttk.Combobox(self.task_creation_window, values=["Low", "Medium", "High"])
        self.priority_combobox.grid(row=1, column=1, columnspan=3, padx=10, pady=10, sticky="W")

        # Time Needed
        self.time_needed_label = ttk.Label(self.task_creation_window, text="Time Needed (hours:minutes):")
        self.time_needed_label.grid(row=2, column=0, padx=10, pady=10, sticky="E")

        self.hours_entry = ttk.Entry(self.task_creation_window, width=5)
        self.hours_entry.grid(row=2, column=1, padx=(10, 0), pady=10, sticky="W")

        self.colon_label = ttk.Label(self.task_creation_window, text=":")
        self.colon_label.grid(row=2, column=2, padx=(0, 0), pady=10, sticky="W")

        self.minutes_entry = ttk.Entry(self.task_creation_window, width=5)
        self.minutes_entry.grid(row=2, column=3, padx=(0, 10), pady=10, sticky="W")

        # Save Task Button
        self.save_task_button = ttk.Button(self.task_creation_window, text="Save Task", command=self.add_task)
        self.save_task_button.grid(row=3, column=0, columnspan=4, padx=10, pady=20)

        # Add some padding around all widgets
        for child in self.task_creation_window.winfo_children():
            child.grid_configure(padx=10, pady=5)

    def add_task(self):
        task_name = self.task_name_entry.get()
        priority = self.priority_combobox.get()
        hours = self.hours_entry.get()
        minutes = self.minutes_entry.get()

        if task_name and priority and hours.isdigit() and minutes.isdigit():
            time_needed = int(hours) * 60 + int(minutes)
            task = {
                "name": task_name,
                "priority": priority,
                "time_needed": time_needed,
                "start_time": None,
                "is_done": False
            }
            task_id = self.save_task_to_db(task)
            task["id"] = task_id
            self.tasks.append(task)
            self.task_listbox.insert(tk.END, f"{task_name} - {priority} - {time_needed} min")
            self.task_name_entry.delete(0, tk.END)
            self.priority_combobox.set("")
            self.hours_entry.delete(0, tk.END)
            self.minutes_entry.delete(0, tk.END)
            self.task_creation_window.destroy()

    def open_timer_window(self):
        selected_task_index = self.task_listbox.curselection()
        if selected_task_index:
            self.timer_window = tk.Toplevel(self.root)
            self.timer_window.title("Task Timer")

            task = self.tasks[selected_task_index[0]]
            if isinstance(task, tuple):
                task_dict = {
                    "id": task[0],
                    "name": task[1],
                    "priority": task[2],
                    "time_needed": task[3],
                    "start_time": datetime.now(),
                    "is_done": task[5]
                }
            else:
                task_dict = task
                task_dict["start_time"] = datetime.now()

            self.time_left = task_dict["time_needed"] * 60
            self.total_time = self.time_left

            self.timer_type = tk.StringVar(value="canvas")

            self.toggle_button = ttk.Checkbutton(self.timer_window, text="Timer Type", variable=self.timer_type, onvalue="canvas", offvalue="countdown", command=self.update_timer_display)
            self.toggle_button.grid(row=0, column=0, columnspan=2)

            self.canvas = tk.Canvas(self.timer_window, width=200, height=200)
            self.arc = self.canvas.create_arc(10, 10, 190, 190, start=90, extent=0, fill="blue")

            self.time_label = ttk.Label(self.timer_window, text=self.format_time(self.time_left))

            self.pause_button = ttk.Button(self.timer_window, text="Pause", command=self.pause_timer)
            self.pause_button.grid(row=2, column=0)

            self.cancel_button = ttk.Button(self.timer_window, text="Cancel", command=self.cancel_timer)
            self.cancel_button.grid(row=2, column=1)

            self.timer_running = True
            self.update_timer_display()
            self.update_timer()

    def update_timer_display(self):
        if self.timer_type.get() == "canvas":
            self.canvas.grid(row=1, column=0, columnspan=2)
            self.time_label.grid_forget()
        else:
            self.canvas.grid_forget()
            self.time_label.grid(row=1, column=0, columnspan=2)

    def update_timer(self):
        if self.timer_running:
            if self.time_left > 0:
                self.time_left -= 1
                extent = (self.total_time - self.time_left) / self.total_time * 360
                if self.timer_type.get() == "canvas":
                    self.canvas.itemconfig(self.arc, extent=extent)
                self.time_label.config(text=self.format_time(self.time_left))
                self.root.after(1000, self.update_timer)
            else:
                self.complete_task()
                self.timer_window.destroy()

    def format_time(self, seconds):
        minutes, seconds = divmod(seconds, 60)
        return f"{minutes:02}:{seconds:02}"

    def complete_task(self):
        selected_task_index = self.task_listbox.curselection()
        if selected_task_index:
            task = self.tasks.pop(selected_task_index[0])
            if isinstance(task, tuple):
                task_dict = {
                    "id": task[0],
                    "name": task[1],
                    "priority": task[2],
                    "time_needed": task[3],
                    "start_time": task[4],
                    "is_done": True
                }
            else:
                task_dict = task
                task_dict["is_done"] = True

            self.done_tasks.append(task_dict)
            self.task_listbox.delete(selected_task_index)
            self.done_listbox.insert(tk.END, f"{task_dict['name']} - {task_dict['priority']} - {task_dict['time_needed']} min")
            self.update_task_in_db(task_dict["id"], 1)
            if not self.tasks and (self.last_streak_update is None or self.last_streak_update.date() < datetime.now().date()):
                if self.last_streak_update is None or (datetime.now().date() - self.last_streak_update.date()).days > 1:
                    self.streak_count = 0
                self.streak_count += 1
                self.streak_label.config(text=f"Streak: {self.streak_count}")
                self.last_streak_update = datetime.now()
                self.save_streak()

    def remove_task(self):
        selected_task_index = self.task_listbox.curselection()
        if selected_task_index:
            task = self.tasks.pop(selected_task_index[0])
            self.task_listbox.delete(selected_task_index)
            if isinstance(task, tuple):
                task_id = task[0]
            else:
                task_id = task["id"]
            self.cursor.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
            self.conn.commit()
        else:
            selected_task_index = self.done_listbox.curselection()
            if selected_task_index:
                task = self.done_tasks.pop(selected_task_index[0])
                self.done_listbox.delete(selected_task_index)
                if isinstance(task, tuple):
                    task_id = task[0]
                else:
                    task_id = task["id"]
                self.cursor.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
                self.conn.commit()

    def pause_timer(self):
        self.timer_running = not self.timer_running
        if self.timer_running:
            self.update_timer()

    def cancel_timer(self):
        self.timer_running = False
        self.timer_window.destroy()

    def check_reset_time(self):
        current_time = datetime.now()
        if current_time >= self.reset_time:
            self.reset_time = current_time.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
            self.reset_tasks()
        self.root.after(1000, self.check_reset_time)

    def reset_tasks(self):
        self.cursor.execute('UPDATE tasks SET is_done = 0')
        self.conn.commit()
        self.task_listbox.delete(0, tk.END)
        self.done_listbox.delete(0, tk.END)
        self.load_tasks()
        self.streak_label.config(text=f"Streak: {self.streak_count}")

if __name__ == "__main__":
    root = tk.Tk()
    app = ToDoApp(root)
    root.mainloop()